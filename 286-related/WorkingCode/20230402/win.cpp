/* Last updated: 01 April 2023
** Key changes in update: Start to win.com
** Author: rehsd
**
** To do:
**			-Move common routines (e.g., graphics) into separate class
**			-
*/

#include <iostream.h>
#include <stdio.h>
#include <i86.h>
#include <string>
#include <dos.h>

//using namespace std;

#define PRINT_CHAR_OPTION_NO_SWAP_FRAME	0x0001		// when set, print_char only prints on inactive VGA frame

int met2[32][32] = {
{0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0xB940,0xDBE6,0xDC87,0xDC67,0xDCC8,0x7243,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000},
{0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x1000,0xB940,0xF1C0,0xFA21,0xF221,0xFC26,0xFD69,0xE508,0x7284,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000},
{0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x1020,0xF9C0,0xF9C0,0xF3A4,0xF241,0xF9E0,0xFA61,0xFA81,0xF220,0x78E0,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000},
{0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x4860,0xE9A0,0xFD08,0xFAC2,0x82A7,0x4B8C,0x434B,0xA2A6,0xC900,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000},
{0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0800,0x9100,0x0000,0x3820,0x4942,0xE1C0,0x4964,0x034E,0x04F3,0x1C2F,0x4A27,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000},
{0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x2840,0x9100,0x70E0,0x92E4,0x8B05,0x8AE4,0x60E0,0x8860,0x4123,0x030D,0x0514,0x032D,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000},
{0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x2020,0x80C0,0x70E0,0x9283,0x92A3,0x92A3,0x7AA4,0x7981,0x8860,0x4143,0x2ACA,0x5A26,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000},
{0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0800,0x70A0,0x90E0,0x0145,0x0167,0x0187,0x6AE6,0x71A2,0x88E0,0x4860,0x6040,0xD940,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000},
{0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x2020,0x50A0,0x68A0,0x9120,0x01A6,0x0491,0x43ED,0x538C,0x40C2,0x8880,0x4060,0x2040,0x88E0,0x7880,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000},
{0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x68C0,0xFA20,0xC120,0x0083,0x0471,0x030C,0xE9C0,0xFA20,0xFAA2,0x81C2,0x1040,0x6080,0x7941,0x0104,0x0124,0x00E3,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000},
{0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x4880,0xD9A0,0xC120,0x00A2,0x334B,0x3060,0xA100,0xF487,0xFD48,0xDD4A,0x52A6,0x0041,0x0186,0x04B2,0x0491,0x03EF,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000},
{0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x4880,0xA120,0x2020,0xF9A0,0xF1A0,0x3040,0xA345,0xF508,0x5C8D,0x0492,0x01E7,0x0145,0x04B2,0x0450,0x032C,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000},
{0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x2040,0xF1A0,0xF9C0,0xE9A0,0x3820,0xAB24,0x548E,0x04B3,0x0207,0x0104,0x0450,0x030B,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000},
{0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x2020,0xF1A0,0xF1C0,0xF1E0,0xE9C0,0x4880,0x02AA,0x0492,0x0208,0x0000,0x0020,0x0020,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000},
{0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x2040,0xF1A0,0xF1C0,0xF446,0xFCA7,0xE4A7,0x41A3,0x0061,0x0020,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000},
{0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x2840,0xD980,0xF1A0,0xF1C0,0xF241,0xF241,0xFA81,0x50A0,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000},
{0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x3860,0xF9C0,0xF1A0,0xF1A0,0xF180,0xF3C5,0xF261,0xD160,0x4860,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000},
{0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x3860,0xF9E0,0xF1A0,0xF1A0,0xF180,0xF487,0xF2C2,0xF960,0xDB03,0x5A03,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000},
{0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x1000,0x68C0,0xF1A0,0xF1C0,0xF384,0xFD48,0xFAA2,0xE920,0xFC46,0x82E5,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000},
{0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x58A0,0x9120,0x3840,0x0000,0x0000,0x0000,0x0000,0xF1A0,0xF1A0,0xF4C7,0x72A4,0xD1A0,0xF9A0,0xF262,0xCB44,0x59E3,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000},
{0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x5840,0xD940,0xF9C0,0xC262,0x4182,0x0000,0x1820,0x9100,0xF1C0,0xFB64,0xFD28,0x18A1,0x4040,0xC980,0xF140,0xFBC4,0x9B86,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000},
{0x0000,0x0000,0x0000,0x0000,0x0000,0x59C3,0xE303,0xFBA4,0xFA41,0xFBE5,0xCBE6,0x3840,0x2040,0xF9C0,0xF220,0xF528,0x9325,0x1860,0x0000,0xA120,0xF9C0,0xF2A2,0xC344,0x49A2,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000},
{0x0000,0x0000,0x0000,0x0000,0x0000,0xDC67,0xFDC9,0xBC27,0x91C1,0xCA62,0xFB43,0xC120,0x70C0,0xF1A0,0xF9C0,0xFB84,0x0820,0x0000,0x0000,0x60A0,0xC980,0xF140,0xFB43,0xBC27,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000},
{0x0000,0x0000,0x0000,0x0000,0x0000,0xDC67,0xC427,0x28C1,0x0000,0x4060,0xD160,0xF9E0,0xF9A0,0xF1C0,0xEA82,0xA100,0x1000,0x0000,0x0000,0x0000,0x78A0,0xF980,0xFAA2,0xB304,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000},
{0x0000,0x0000,0x0000,0x0000,0x0000,0xA345,0x20C1,0x0000,0x0000,0x0000,0x4060,0xD180,0xF9E0,0xFB43,0xECC8,0x0020,0x0000,0x0000,0x0000,0x2020,0xA181,0xFAE2,0xEA21,0x78A0,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000},
{0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x3020,0xCA21,0xCC47,0xB3A6,0x0820,0x0000,0x0000,0x1820,0xB100,0xFBE5,0xED49,0x7284,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000},
{0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x1800,0xB920,0xF9A0,0xEB84,0x6A84,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000},
{0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0xB9A0,0xFA20,0xE9C0,0x60C0,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000},
{0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0xCBC6,0xFD28,0x59A2,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000},
{0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0xB960,0xF220,0xFA41,0x48A0,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000},
{0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0800,0xE180,0xF980,0xF384,0xDCA7,0x51A2,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000},
{0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x2020,0xC940,0xF446,0xFD69,0xE4E8,0x6A23,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000}
};

void getTime(int& hour, int* minutes, int* seconds, int* milliseconds)
{
	union REGPACK regs;
	memset(&regs, 0, sizeof(union REGPACK));
	regs.w.ax = 0x2c00;				// AH = 0x2c
	intr(0x21, &regs);
	hour = regs.h.ch;
	*minutes = regs.h.cl;
	*seconds = regs.h.dh;
	*milliseconds = regs.h.dl;
	return;
}
void setCursorPosition(int x, int y)
{
	union REGPACK regs;
	memset(&regs, 0, sizeof(union REGPACK));
	regs.w.ax = 0x0200;				// AH = 0x02
	regs.w.bx = x;					// column position in pixels
	regs.w.cx = y;					// row  position in pixels
	intr(0x10, &regs);
}
void readCursorPosition(int* x, int* y)
{
	union REGPACK regs;
	memset(&regs, 0, sizeof(union REGPACK));
	regs.w.ax = 0x0200;				// AH = 0x02
	intr(0x10, &regs);
	*x = regs.w.bx;					// column position in pixels
	*y = regs.w.cx;					// row  position in pixels
}
void swapFrame()
{
	union REGPACK regs;
	memset(&regs, 0, sizeof(union REGPACK));
	regs.w.ax = 0xb000;				// AH = 0xb0
	intr(0x10, &regs);
}
void showMouse()
{
	union REGPACK regs;
	memset(&regs, 0, sizeof(union REGPACK));
	regs.w.ax = 0x0001;				
	intr(0x31, &regs);
}
void hideMouse()
{
	union REGPACK regs;
	memset(&regs, 0, sizeof(union REGPACK));
	regs.w.ax = 0x0002;
	intr(0x31, &regs);
}
void clearScreen(int color)
{
	union REGPACK regs;
	memset(&regs, 0, sizeof(union REGPACK));
	regs.w.ax = 0xb400;				// AH = 0xb4
	regs.w.dx = color & 0x00ff;		// screen color: gray
	intr(0x10, &regs);
}
void setPrintCharOptions(int options)
{
	union REGPACK regs;
	memset(&regs, 0, sizeof(union REGPACK));
	regs.w.ax = 0xb100;				// AH = 0x02
	regs.w.bx = options & 0x0000ffff;			// print char options
	intr(0x10, &regs);
}
int readPrintCharOptions(int options)
{
	union REGPACK regs;
	memset(&regs, 0, sizeof(union REGPACK));
	regs.w.ax = 0xb200;				// AH = 0x02
	intr(0x10, &regs);
	return regs.w.bx;				// print char options
}
void drawPixel(int x, int y, int color)
{
	union REGPACK regs;
	memset(&regs, 0, sizeof(union REGPACK));
	regs.w.ax = 0xb300;
	regs.w.bx = color & 0x0000ffff;	// 16-bit color
	regs.w.cx = x;					// column #
	regs.w.dx = y;					// row #
	intr(0x10, &regs);
}
void drawRectFilled(int x1, int y1, int x2, int y2, int color)
{
	for (int y = y1; y <= y2; y++)
	{
		for (int x = x1; x <= x2; x++)
		{
			drawPixel(x, y, color);
		}
	}
}
void drawSprite(int x, int y, int spriteNum)
{
	int _x = 0;
	int _y = 0;
	switch (spriteNum)
	{
	case 0:
		break;
	case 1:
		for (int ypos = 0; ypos < 32; ypos++)
		{
			for (int xpos = 0; xpos < 32; xpos++)
			{
				drawPixel(xpos + x, ypos + y, (int)met2[ypos][xpos]);	//(int)met1[_x][_y]
				_y++;
			}
			_x++;
		}
		break;
	case 2:
		break;

	default:
		//do nothing
		break;
	}
}

void loop()
{
	while (true)
	{

	}
}

int main()
{
	clearScreen(0xf800);		

	setPrintCharOptions(PRINT_CHAR_OPTION_NO_SWAP_FRAME);

	drawRectFilled(0, 467, 639, 479, 0x03e0);	//start bar
	drawRectFilled(2, 468, 40, 478, 0x79EF);	//start button
	setCursorPosition(4, 470);
	printf("START");
	fflush(stdout);
	drawSprite(308, 200, 1);
	swapFrame();

	drawRectFilled(0, 467, 639, 479, 0x03e0);	//start bar
	drawRectFilled(2, 468, 40, 478, 0x79EF);	//start button
	setCursorPosition(4, 470);
	printf("START");
	fflush(stdout);
	drawSprite(308, 200, 1);

	setPrintCharOptions(0);		//enable default behavior to print to both frames
	showMouse();

	loop();

	return 0;
}