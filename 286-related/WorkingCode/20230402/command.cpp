/* Last updated: 25 March 2023
** Key changes in update: Added additional INT10H calls
** Author: rehsd
**
** To do:
**			-Move video routines into separate class
**			-
*/

#include <iostream.h>
#include <stdio.h>
#include <i86.h>
#include <string>
#include <dos.h>

//using namespace std;

#define PRINT_CHAR_OPTION_NO_SWAP_FRAME	0x0001		// when set, print_char only prints on inactive VGA frame

// sprite data
int met1[32][32] = {
{0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0800,0x98E0,0xFB43,0xF4C7,0xF4C7,0xFD48,0xB3A6,0x0860,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000},
{0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0xA120,0xF9C0,0xF1E0,0xF1A0,0xF2E3,0xFCC7,0xFCC7,0xBB65,0x0800,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000},
{0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x9900,0xF180,0xF384,0xF364,0xE980,0xE201,0xEA01,0xF200,0xB940,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000},
{0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x1000,0x98C0,0xFBE5,0xFB83,0x9245,0x1C0F,0x1BEF,0x5B6A,0xD140,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000},
{0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x88E0,0xC960,0x5040,0x8B05,0xFBC4,0x80A0,0x01E8,0x04B2,0x0451,0x230B,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000},
{0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0xA920,0xC960,0xC365,0xF466,0xFCA6,0x4101,0x6A64,0xFD68,0xE2C3,0x7060,0x01E8,0x04D3,0x03AE,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000},
{0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0800,0xA920,0x6060,0x5040,0x5121,0xD467,0xFD89,0xC447,0x51A2,0x8B05,0xFD88,0xE303,0x68C0,0x21A5,0x8A04,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000},
{0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x48A0,0x028A,0x02EC,0x02CB,0x3983,0xD3E5,0xFDA9,0xBBE6,0x51E3,0x8A63,0xFB02,0xA900,0x3000,0xE140,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000},
{0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x68C0,0x82A7,0x0208,0x01C8,0x0229,0x4205,0xC3E6,0xFE0A,0xBB04,0x5800,0x5840,0x68A0,0x88C0,0x58C0,0x8AC4,0x7A84,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000},
{0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x1000,0xF9E0,0xFAE2,0x8A22,0x8222,0x2247,0x0021,0x91A1,0xFBC4,0xFB84,0xC2C4,0x6264,0x71E2,0x8100,0x7AC4,0xFD89,0xFD28,0x70A0,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000},
{0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0800,0x8900,0xFD08,0xFD89,0xBD4B,0x2A47,0x01E7,0x5102,0x9020,0xC2C3,0xFDEA,0xFD48,0xA243,0x2101,0xFDC9,0xF4E8,0xF364,0xFB03,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000},
{0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x92E4,0xFD08,0x2C6F,0x04B3,0x038E,0x01A7,0x0186,0x6AA6,0xFC46,0xFB23,0xA0A0,0x18A1,0xAB65,0xF3A4,0xF303,0xFD48,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000},
{0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x9AE4,0x2C8F,0x03AE,0x0124,0x02EB,0x0431,0x7246,0xF920,0xF9A0,0xA940,0x0800,0x6040,0xFA00,0xFC46,0xB3A6,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000},
{0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x02AA,0x00A2,0x02AA,0x0513,0x0166,0x70A0,0xFAC2,0xEA21,0x78C0,0x2020,0xD160,0xC960,0xA920,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000},
{0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x1800,0x2020,0x0269,0x0492,0x01E8,0x7223,0xED08,0x82A4,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000},
{0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0xB940,0xF1C0,0x5860,0x1269,0x1491,0x9328,0x98C0,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000},
{0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0xC160,0xF9E0,0xE980,0xE160,0xE3C6,0xF3C5,0x88C0,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000},
{0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0xB940,0xF9C0,0xF1C0,0xF160,0xFB64,0xFD08,0xECC7,0x8AC4,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000},
{0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x1820,0xB940,0xF1C0,0xF1A0,0xF200,0xF221,0xFBA4,0xED08,0xCC67,0x9B25,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000},
{0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0xA920,0xF9C0,0xF9C0,0xF9A0,0xF980,0xFA00,0xF282,0xFAA2,0xEAE3,0xBC06,0xA345,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000},
{0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0xB140,0xF9E0,0x78E0,0x3860,0x4060,0x90E0,0xF9C0,0xF960,0xF261,0xFDC9,0xDCA8,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000},
{0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0xB140,0xF9E0,0xB120,0x3020,0x0000,0x1820,0x50A0,0x78A0,0xF1C0,0xFAE2,0xE2A2,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000},
{0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0xA920,0xF9A0,0xFB23,0x71C2,0x0000,0x0000,0x0800,0x99A1,0xFBC5,0xEB03,0x5860,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000},
{0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x5080,0xD140,0xF160,0xFC86,0x7AC5,0x0000,0x2000,0xA8C0,0xFB23,0xED49,0x6244,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000},
{0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x4880,0xE160,0xFAC2,0xFA41,0xC2A3,0x3142,0x20E1,0xAAE4,0xFAC2,0xE241,0x6A23,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000},
{0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x4060,0xE980,0xFAC2,0xFD28,0xC2C3,0x3000,0x1800,0xAA62,0xFC86,0xDB03,0x6860,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000},
{0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x3860,0x3840,0x4040,0xF1A0,0xF9C0,0xC365,0xB406,0x3102,0x0000,0x9100,0xF9C0,0xFA00,0x9161,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000},
{0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0xF9C0,0xFA81,0xFA81,0xC980,0xC160,0x2000,0x0000,0x0000,0x0000,0x68C0,0xE160,0xFB64,0xB3E6,0x1880,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000},
{0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0xF1E0,0xF466,0xCC06,0x1060,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x6060,0xEB03,0xFDA9,0xC3E6,0x1880,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000},
{0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0xF9C0,0xE1E0,0x28A0,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x61E3,0xE4E8,0xE4C8,0xA345,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000},
{0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0xE9E0,0xF4A7,0xDC87,0x20A1,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0840,0x1040,0x0840,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000},
{0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x2060,0xECC8,0xFD28,0xE4A7,0x20A1,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000}
};
int met2[32][32] = {
{0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0xB940,0xDBE6,0xDC87,0xDC67,0xDCC8,0x7243,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000},
{0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x1000,0xB940,0xF1C0,0xFA21,0xF221,0xFC26,0xFD69,0xE508,0x7284,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000},
{0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x1020,0xF9C0,0xF9C0,0xF3A4,0xF241,0xF9E0,0xFA61,0xFA81,0xF220,0x78E0,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000},
{0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x4860,0xE9A0,0xFD08,0xFAC2,0x82A7,0x4B8C,0x434B,0xA2A6,0xC900,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000},
{0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0800,0x9100,0x0000,0x3820,0x4942,0xE1C0,0x4964,0x034E,0x04F3,0x1C2F,0x4A27,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000},
{0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x2840,0x9100,0x70E0,0x92E4,0x8B05,0x8AE4,0x60E0,0x8860,0x4123,0x030D,0x0514,0x032D,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000},
{0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x2020,0x80C0,0x70E0,0x9283,0x92A3,0x92A3,0x7AA4,0x7981,0x8860,0x4143,0x2ACA,0x5A26,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000},
{0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0800,0x70A0,0x90E0,0x0145,0x0167,0x0187,0x6AE6,0x71A2,0x88E0,0x4860,0x6040,0xD940,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000},
{0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x2020,0x50A0,0x68A0,0x9120,0x01A6,0x0491,0x43ED,0x538C,0x40C2,0x8880,0x4060,0x2040,0x88E0,0x7880,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000},
{0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x68C0,0xFA20,0xC120,0x0083,0x0471,0x030C,0xE9C0,0xFA20,0xFAA2,0x81C2,0x1040,0x6080,0x7941,0x0104,0x0124,0x00E3,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000},
{0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x4880,0xD9A0,0xC120,0x00A2,0x334B,0x3060,0xA100,0xF487,0xFD48,0xDD4A,0x52A6,0x0041,0x0186,0x04B2,0x0491,0x03EF,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000},
{0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x4880,0xA120,0x2020,0xF9A0,0xF1A0,0x3040,0xA345,0xF508,0x5C8D,0x0492,0x01E7,0x0145,0x04B2,0x0450,0x032C,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000},
{0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x2040,0xF1A0,0xF9C0,0xE9A0,0x3820,0xAB24,0x548E,0x04B3,0x0207,0x0104,0x0450,0x030B,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000},
{0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x2020,0xF1A0,0xF1C0,0xF1E0,0xE9C0,0x4880,0x02AA,0x0492,0x0208,0x0000,0x0020,0x0020,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000},
{0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x2040,0xF1A0,0xF1C0,0xF446,0xFCA7,0xE4A7,0x41A3,0x0061,0x0020,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000},
{0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x2840,0xD980,0xF1A0,0xF1C0,0xF241,0xF241,0xFA81,0x50A0,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000},
{0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x3860,0xF9C0,0xF1A0,0xF1A0,0xF180,0xF3C5,0xF261,0xD160,0x4860,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000},
{0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x3860,0xF9E0,0xF1A0,0xF1A0,0xF180,0xF487,0xF2C2,0xF960,0xDB03,0x5A03,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000},
{0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x1000,0x68C0,0xF1A0,0xF1C0,0xF384,0xFD48,0xFAA2,0xE920,0xFC46,0x82E5,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000},
{0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x58A0,0x9120,0x3840,0x0000,0x0000,0x0000,0x0000,0xF1A0,0xF1A0,0xF4C7,0x72A4,0xD1A0,0xF9A0,0xF262,0xCB44,0x59E3,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000},
{0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x5840,0xD940,0xF9C0,0xC262,0x4182,0x0000,0x1820,0x9100,0xF1C0,0xFB64,0xFD28,0x18A1,0x4040,0xC980,0xF140,0xFBC4,0x9B86,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000},
{0x0000,0x0000,0x0000,0x0000,0x0000,0x59C3,0xE303,0xFBA4,0xFA41,0xFBE5,0xCBE6,0x3840,0x2040,0xF9C0,0xF220,0xF528,0x9325,0x1860,0x0000,0xA120,0xF9C0,0xF2A2,0xC344,0x49A2,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000},
{0x0000,0x0000,0x0000,0x0000,0x0000,0xDC67,0xFDC9,0xBC27,0x91C1,0xCA62,0xFB43,0xC120,0x70C0,0xF1A0,0xF9C0,0xFB84,0x0820,0x0000,0x0000,0x60A0,0xC980,0xF140,0xFB43,0xBC27,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000},
{0x0000,0x0000,0x0000,0x0000,0x0000,0xDC67,0xC427,0x28C1,0x0000,0x4060,0xD160,0xF9E0,0xF9A0,0xF1C0,0xEA82,0xA100,0x1000,0x0000,0x0000,0x0000,0x78A0,0xF980,0xFAA2,0xB304,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000},
{0x0000,0x0000,0x0000,0x0000,0x0000,0xA345,0x20C1,0x0000,0x0000,0x0000,0x4060,0xD180,0xF9E0,0xFB43,0xECC8,0x0020,0x0000,0x0000,0x0000,0x2020,0xA181,0xFAE2,0xEA21,0x78A0,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000},
{0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x3020,0xCA21,0xCC47,0xB3A6,0x0820,0x0000,0x0000,0x1820,0xB100,0xFBE5,0xED49,0x7284,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000},
{0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x1800,0xB920,0xF9A0,0xEB84,0x6A84,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000},
{0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0xB9A0,0xFA20,0xE9C0,0x60C0,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000},
{0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0xCBC6,0xFD28,0x59A2,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000},
{0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0xB960,0xF220,0xFA41,0x48A0,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000},
{0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0800,0xE180,0xF980,0xF384,0xDCA7,0x51A2,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000},
{0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x2020,0xC940,0xF446,0xFD69,0xE4E8,0x6A23,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000}
};
int met3[32][32] = {
{0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x5880,0xFA61,0xF4C7,0xF4C7,0xF4E8,0xFD48,0x7264,0x0020,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000},
{0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x70C0,0xF1C0,0xF1C0,0xF1E0,0xF1E0,0xF466,0xF4E8,0xF508,0x8AA4,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000},
{0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x78E0,0xF9C0,0xF261,0xF446,0xF1C0,0xF1E0,0xFA00,0xFA20,0xF1E0,0x9100,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000},
{0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0800,0x70A0,0xFAA2,0xFCC7,0xF1E0,0x536B,0x33AD,0x33AD,0x9AC6,0xD100,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000},
{0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x4820,0x8080,0x6981,0xFCA7,0xF1A0,0x0924,0x03AF,0x04D3,0x1C0F,0x4267,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000},
{0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x70A0,0x9A63,0xE406,0xA222,0x0061,0xFD48,0xF3A4,0x98C0,0x10E4,0x036D,0x0514,0x034D,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000},
{0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x70C0,0x90A0,0x9A22,0x9304,0x82A4,0x7264,0x82A4,0xFD49,0xFC05,0x9900,0x2124,0x2AEA,0x5246,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000},
{0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0xA120,0x0944,0x0146,0x0125,0x3A05,0xAB24,0x4982,0x9305,0xF426,0xFAC1,0x5840,0x6040,0xD940,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000},
{0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x2020,0x330A,0x0BAE,0x038E,0x024A,0x2164,0xC3C6,0x3020,0x98A0,0xB120,0x60A0,0x70C0,0x9100,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000},
{0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0xE9A0,0xFA20,0x6900,0x2080,0x19C6,0x030C,0x1000,0xEA01,0x40E1,0x10A1,0x9140,0x88E0,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000},
{0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0xD160,0xFC26,0xF508,0xED08,0x9326,0x0041,0x1081,0xDC47,0xE4A7,0xECE8,0x6A03,0x0000,0x0800,0x0820,0x0820,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000},
{0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x1000,0xC3E6,0xFD48,0x8CCC,0x1410,0x03CF,0x038D,0x10A1,0x1860,0xC9C0,0x60E0,0x4040,0xE261,0xDCA7,0xDC67,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000},
{0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x18A1,0xCBC5,0x8CED,0x0472,0x03AE,0x00C3,0x030C,0x038E,0xC243,0x6860,0x5040,0xFAC2,0xFD69,0xFD48,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000},
{0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x28C0,0x1B2B,0x036E,0x0144,0x030B,0x0451,0x01E7,0x30C1,0x1800,0x60A0,0xFA40,0xEA82,0x4162,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000},
{0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x4143,0x6183,0x0062,0x04F3,0x0450,0x0000,0x0000,0x0000,0x2840,0x60A0,0x4840,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000},
{0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x4880,0xC940,0xE140,0x50E1,0x0208,0x0451,0x02CB,0x00A2,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000},
{0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0xA920,0xF9E0,0xF9C0,0xE1C0,0x59A2,0x5AE9,0x030C,0x00C3,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000},
{0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0xA120,0xF9E0,0xF180,0xF282,0xFD28,0xFA81,0x6060,0x0800,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000},
{0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x80E0,0xE1A0,0xF180,0xF261,0xF508,0xF508,0xFA61,0x6080,0x0800,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000},
{0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x78C0,0xF9A0,0xF261,0xF508,0xFD08,0xF241,0xF9A0,0x68A0,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000},
{0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x70C0,0xF9A0,0xF261,0xF508,0xF4E8,0xF221,0xF9C0,0x68C0,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000},
{0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x70C0,0xF9A0,0xF281,0xDCA8,0x28E1,0xC960,0xF9E0,0x68C0,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000},
{0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x70E0,0xF9A0,0xF9C0,0xD201,0x0000,0xD980,0x78E0,0x1020,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000},
{0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x6880,0xFA81,0xFC05,0xDB44,0x0820,0x4880,0x1000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000},
{0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x5080,0xB920,0xF303,0xFDCA,0xF508,0x0840,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000},
{0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0xA120,0xF9C0,0xFA61,0xEBA5,0x82A4,0x0020,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000},
{0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x3040,0xB920,0xF9C0,0xE180,0x7880,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000},
{0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0xC201,0xFAA2,0xDA00,0x70C0,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000},
{0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x1820,0xC3A5,0xFD28,0x7223,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000},
{0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0xD980,0xF1C0,0xFA00,0x7900,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000},
{0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0xE1A0,0xF180,0xF384,0xED08,0x8AC4,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000},
{0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x2020,0xC120,0xF3E5,0xFD69,0xF508,0xA345,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000}
};

void getTime(int &hour, int *minutes, int *seconds, int *milliseconds)
{
	union REGPACK regs;
	memset(&regs, 0, sizeof(union REGPACK));
	regs.w.ax = 0x2c00;				// AH = 0x2c
	intr(0x21, &regs);
	hour = regs.h.ch;
	*minutes = regs.h.cl;
	*seconds = regs.h.dh;
	*milliseconds = regs.h.dl;
	return;
}
void setCursorPosition(int x, int y)
{
	union REGPACK regs;
	memset(&regs, 0, sizeof(union REGPACK));
	regs.w.ax = 0x0200;				// AH = 0x02
	regs.w.bx = x;					// column position in pixels
	regs.w.cx = y;					// row  position in pixels
	intr(0x10, &regs);
}
void readCursorPosition(int *x, int *y)
{
	union REGPACK regs;
	memset(&regs, 0, sizeof(union REGPACK));
	regs.w.ax = 0x0200;				// AH = 0x02
	intr(0x10, &regs);
	*x = regs.w.bx;					// column position in pixels
	*y = regs.w.cx;					// row  position in pixels
}
void swapFrame()
{
	union REGPACK regs;
	memset(&regs, 0, sizeof(union REGPACK));
	regs.w.ax = 0xb000;				// AH = 0xb0
	intr(0x10, &regs);
}
void clearScreen()
{
	union REGPACK regs;
	memset(&regs, 0, sizeof(union REGPACK));
	regs.w.ax = 0xb400;				// AH = 0xb4
	intr(0x10, &regs);
}
void setPrintCharOptions(int options)
{
	union REGPACK regs;
	memset(&regs, 0, sizeof(union REGPACK));
	regs.w.ax = 0xb100;				// AH = 0x02
	regs.w.bx = options & 0x0000ffff;			// print char options
	intr(0x10, &regs);
}
int readPrintCharOptions(int options)
{
	union REGPACK regs;
	memset(&regs, 0, sizeof(union REGPACK));
	regs.w.ax = 0xb200;				// AH = 0x02
	intr(0x10, &regs);
	return regs.w.bx;				// print char options
}
void drawPixel(int x, int y, int color)
{
	union REGPACK regs;
	memset(&regs, 0, sizeof(union REGPACK));
	regs.w.ax = 0xb300;
	regs.w.bx = color & 0x0000ffff;	// 16-bit color
	regs.w.cx = x;					// column #
	regs.w.dx = y;					// row #
	intr(0x10, &regs);
}
void drawRectFilled(int x1, int y1, int x2, int y2, int color)
{
	for (int y = y1; y <= y2; y++)
	{
		for (int x = x1; x <= x2; x++)
		{
			drawPixel(x, y, color);
		}
	}
}
void drawSprite(int x, int y, int spriteNum)
{
	int _x = 0;
	int _y = 0;
	switch (spriteNum)
	{
		case 0:
			for (int ypos = 0; ypos < 32; ypos++)
			{
				for (int xpos = 0; xpos < 32; xpos++)
				{
					drawPixel(xpos+x, ypos+y, (int)met1[ypos][xpos]);	//(int)met1[_x][_y]
					_y++;
				}
				_x++;
			}
			break;
		case 1:
			for (int ypos = 0; ypos < 32; ypos++)
			{
				for (int xpos = 0; xpos < 32; xpos++)
				{
					drawPixel(xpos + x, ypos + y, (int)met2[ypos][xpos]);	//(int)met1[_x][_y]
					_y++;
				}
				_x++;
			}
			break;
		case 2:
			for (int ypos = 0; ypos < 32; ypos++)
			{
				for (int xpos = 0; xpos < 32; xpos++)
				{
					drawPixel(xpos + x, ypos + y, (int)met3[ypos][xpos]);	//(int)met1[_x][_y]
					_y++;
				}
				_x++;
			}
			break;

		default:
			//do nothing
			break;
	}
}
void clearSpriteTrail(int x, int y)
{
	drawRectFilled(x, y, x + 12, y + 31, 0x00000);		//if moving left to right, only need to clean up the portion not refreshed
}
void clearSprite(int x, int y)
{
	drawRectFilled(x, y, x + 31, y + 31, 0x00000);		//if moving left to right, only need to clean up the portion not refreshed
}
void animateSprite()
{
	int xmove = 6; 
	int yloc = 400;
	int spriteNum = 0;

	for (int x = 20; x < 600; x += xmove)
	{
		clearSpriteTrail(x - 12, yloc);	//clear previous sprite
		drawSprite(x, yloc, spriteNum);
		swapFrame();
		spriteNum++;
		if (spriteNum > 2) { spriteNum = 0; }
	}
	clearSprite(590, yloc);		//clear last sprite
	swapFrame();
	clearSprite(595, yloc);		//clear last sprite
	swapFrame();
}

int main()
{
	printf("Loading...");
	fflush(stdout);
	swapFrame();
	
	//delay(1000);		// relies on INT21, 0x2c

	clearScreen();

	// ********** border
	setPrintCharOptions(PRINT_CHAR_OPTION_NO_SWAP_FRAME);

	drawRectFilled(0, 0, 639, 3, 0x1f);		//color is RGB565		0x1f=full blue
	drawRectFilled(0, 0, 3, 479, 0x1f);		//color is RGB565		0x1f=full blue
	drawRectFilled(0, 476, 639, 479, 0x1f);		//color is RGB565		0x1f=full blue
	drawRectFilled(636, 0, 639, 479, 0x1f);		//color is RGB565		0x1f=full blue
	setCursorPosition(50, 10);
	printf("Welcome to rOS!");	
	fflush(stdout);
	swapFrame();

	drawRectFilled(0, 0, 639, 3, 0x1f);		//color is RGB565		0x1f=full blue
	drawRectFilled(0, 0, 3, 479, 0x1f);		//color is RGB565		0x1f=full blue
	drawRectFilled(0, 476, 639, 479, 0x1f);		//color is RGB565		0x1f=full blue
	drawRectFilled(636, 0, 639, 479, 0x1f);		//color is RGB565		0x1f=full blue
	setCursorPosition(50, 10);
	printf("Welcome to rOS!");
	fflush(stdout);

	//**********

	setPrintCharOptions(0);		//enable default behavior to print to both frames

	setCursorPosition(10, 40);
	printf("Hello world (cpp) 3/25!");
	fflush(stdout);

	animateSprite();

	setCursorPosition(10, 70);
	printf("\n What is your favorite color? ");
	char selectedColor[30];
	fgets(selectedColor, 30, stdin);
	
	int totalChars = strlen(selectedColor);
	selectedColor[totalChars - 1] = 0;


	printf(" You chose ");
	for (int i = 0; i < totalChars-1; i++)
	{
		printf("%c", selectedColor[i]);
	}
	printf("!");
	fflush(stdout);

	delay(2000);

	return 0;
}

/*	Programming notes
	= int * iPtr;     // declare a pointer variable pointing to an int - contains an address - that address holds an int value
	= address-of operator (&)
	= indirection operator (or dereferencing operator) (*) operates on a pointer, and returns the value stored in the address kept in the pointer variable
	https://www3.ntu.edu.sg/home/ehchua/programming/cpp/cp4_PointerReference.html
*/